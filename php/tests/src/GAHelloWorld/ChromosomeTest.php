<?php

namespace GAHelloWorld;

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../src/GAHelloWorld/Chromosome.php';

/**
 * Test class for Chromosome.
 * Generated by PHPUnit on 2011-04-16 at 08:32:16.
 */
class ChromosomeTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Chromosome
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->population = new Population('Hello, World!');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function test_genRandom()
    {
        $i = 1000;
        while ($i--)
        {
            $c = Chromosome::genRandom($this->population);
            $this->assertTrue($c->fitness >= 0);
            $this->assertEquals(13, strlen($c->gene));
            foreach (str_split($c->gene) as $ch)
            {
                $this->assertTrue(ord($ch) >= 32);
                $this->assertTrue(ord($ch) <= 122);
            }
        }

    }

    public function test_fitness() {
        $c = new Chromosome($this->population, 'Hello, World!');
        $this->assertEquals(0, $c->fitness);

        $c = new Chromosome($this->population, 'H5p&J;!l<X\7l');
        $this->assertEquals(409, $c->fitness);

        $c = new Chromosome($this->population, 'Vc;fx#QRP8V\$');
        $this->assertEquals(265, $c->fitness);

        $c = new Chromosome($this->population, "t\\O`E_Jx\$n=NF");
        $this->assertEquals(447, $c->fitness);
    }

    /**
     * @todo Implement testMate().
     */
    public function testMate() {

        $i = 1000;
        while ($i--)
        {
            $c1 = Chromosome::genRandom($this->population);
            $c2 = Chromosome::genRandom($this->population);

            $children = $c1->mate($c2);
            $this->assertEquals(2, count($children));
            $this->assertEquals(13, strlen($children[0]->gene));
            $this->assertEquals(13, strlen($children[1]->gene));

            for ($pivot=0; $pivot<strlen($c1->gene); $pivot++)
                if ($c1->gene{$pivot} != $children[0]->gene{$pivot}) break;

            $c1_p1 = substr($c1->gene, 0, $pivot);
            $c1_p2 = substr($c1->gene, -13 + $pivot);

            $c2_p1 = substr($c2->gene, 0, $pivot);
            $c2_p2 = substr($c2->gene, -13 + $pivot);

            $this->assertEquals($children[0]->gene, $c1_p1 . $c2_p2);
            $this->assertEquals($children[1]->gene, $c2_p1 . $c1_p2);
        }
    }

    /**
     * @todo Implement testMutate().
     */
    public function testMutate() {
        $i = 1000;
        while ($i--)
        {
            $c1 = Chromosome::genRandom($this->population);
            $c2 = $c1->mutate();
            $this->assertEquals(strlen($c1->gene), strlen($c2->gene));
            $diff = levenshtein($c1->gene, $c2->gene);

            $this->assertTrue($diff <= 1);
        }
    }

    /**
     * @todo Implement testUpdateFitness().
     */
    public function testUpdateFitness() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGenRandom().
     */
    public function testGenRandom() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
